
= Making cfml-rest =
 
To start, we'll

== create a skeleton: ==
 
cfdistro cfdistro.skeleton target.dir=/some/projects/cfml-rest distro.name=cfml-rest

Next, we'll set up our target builds, which will be fw1.cfonz, machii.cfonz, etc.. 

For now, we'll just set the host name

build.fw1.properties:

server.host=fw1.cfoanz
war.target.dir=${jetty.dir}/webapps/fw1.cfoanz

build.machii.properties: 

server.host=machii.cfoanz 
war.target.dir=${jetty.dir}/webapps/machii.cfoanz

 

etc..

We'll

== add the various source repositories ==
 
in build/src.xml.  If we wanted to, we could have separate src.fw1.xml, src.machii.xml, etc., but that's more for building builds, vs. building code we're gonna be working on interchangeably-ish.  Really there's a million options for how you want to deploy-- these could each easily be their own projects, for instance, if we weren't doing group example type deal here.

build/src.xml  
<pre> <src dest="@src.dir@/fw1/org" type="git" 
uri="https://github.com/seancorfield/fw1.git"
path="/org" 
user="" password="" />

 
</pre>
 
The above is saying we're going to grab the sources form git and stick them in the /fw1/ base folder.  Because we've added this to the "sources" element in src.xml, it's not going to be linked to the source code of the project itself (in the "project" element of src.xml).  This means that we'll have our own copies of these sources, which we can commit to our project's source control, but we can "import" the latest from their respective repositories easily.

The flow here is, you check out, say the FW/1 sources, commit them to your project's repo, and when a new version of FW/1 is out (or you want to experiment with a beta, or whatever) you can edit the src.xml file, or run "cfdistro src.import", to pull the stuff from the repo.  There's also a handy function somewhere in cfdistro that lets you create a patch for the project based off of what is in the main project repo (FW/1 in this case) and your local code (whatever changes you made to your local copy of FW/1).
Obviously this is all about making our lives as coders living with living code a bit easier. CLWLC FTW! 

So, to continue, we're going to pull in the fw1 stuff and see if we can get our fw1.cfoanz host rolling.  We begin by typing "cfdistro src.import" in our project root.  Then we go get some coffee, because there's a bunch of freaking source we're downloading (fw/1, coldbox, machii, cfwheels, taffy).

Once it's all downloaded,

== let's set our base mapping.xml ==
file by running "cfdistro src.to.mappings.xml".  This will create a mappings.xml file set up to use the folders in our src directory for mappings.  

Configure the build

by editing the build.properties file.  We're going to set up some default build properties that can be overwritten by more specific build.type properties.

set the port:

server.port.http=8087

Edit build.xml and add a redirector for each build:
<echo file="${war.target.dir}/index.cfm"><![CDATA[<cflocation url="${build.type}app/index.cfm"/> ]]></echo> 

When we run each build.type, this will be fw1app/index.cfm, machiiapp/index.cfm 

Import some data

The taffy example uses the cfartgallery dsn.  We'll create it using the dsn-import def in our build.xml 
<dsn-import dsn="cfartgallery" schemafile="${basedir}/cfartgallery.ddl.xml" datafile="${basedir}/cfartgallery.dml.xml" /> 

This will add import it into the cfartgallery dsn, which is defined in datasources.xml 

 

Then we'll try to

== run a build: ==
 "cfdistro build"

Next, we'll

== start the build ==
in jetty server in the foreground "cfdistro runwar.start.fg" (you can run it in the background with "runwar.start", but lets verify it'll start first!).  If all goes well, we'll now be able to open a browser to 127.0.0.1:8087 (the port is set in build/build.properties).

Next, let's test our fw1 app by going to 127.0.0.1:8087/fw1app 

We should get the fw/1 welcome screen, albiet without the CSS and whatnot (we'll address this in a bit).

Maybe we should try the mach-ii app next?  We'll need to change the CHANGEME to /MachIIapp in the file !MachIIapp/config/mach-ii.xml, then hit up:

127.0.0.1:8087/MachIIapp 

Next we'll test out !CFWheels by going to:

http://localhost:8087/cfwheels/

And then coldbox via:

http://localhost:8087/coldbox/samples/ 

 

We should see nice welcoming screens for all the above. 

Now let's set up our hosts.  We'll begin by adding host entries to our hosts file

sudo cfdistro server.etc.hosts build.type=fw1

sudo cfdistro server.etc.hosts build.type=machii

sudo cfdistro server.etc.hosts build.type=cfwheels

...    

Let's install jetty7 with shared libs since we want them all to run the same version of railo, and save space:

edit buid.properties and set the jetty dir.  In this case, the project root (path is relative to ./build):

jetty.dir=../jetty7 

Install Jetty 

cfdistro jetty.install

Configure a vhost context in jetty7/contexts

 

cfdistro jetty.configure build.type=fw1

cfdistro jetty.configure build.type=machii

... 

Build each host context (mappings, datasources, etc.)

cfdistro jetty.build build.type=fw1

cfdistro jetty.build build.type=machii

 

Start jetty in the foreground

cfdistro jetty.start background=false

You should see the hosts start up.  Browse to each host and verify! 
